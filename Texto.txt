
The project page

Now that we’ve discussed the search feature for finding projects on GitHub, let’s talk about the repository page. First off, GitHub has put a lot of work into the user interface and user experience of this page. We’ll cover the main parts of the repository homepage, along with some of the links. And then we’ll get into actually using this page when we discuss managing your project.

There are four main parts of the GitHub Project page. The top part (with links and menus), Project Information area, Source Code area and, finally, the README.md at the bottom. In the header, you’ll find links to Code, Issues, Pull Requests, Pulse and Graphs. Each of these has its own purpose:

Code: The actual source code of the project

Issues: Feature-Suggestions, bugs, enhancements, and conversation about the project.

Pull Requests: Code that has been submitted to be part of the project.

Pulse: Analytics and Overview of the activity of the project.

Graphs: Deeper analytics and information about all sorts of project details.

You’ll also find three buttons known as Watch, Star and Fork. Take some time to get familiar with these:

Watch: This allows you to receive notifications of all the activity on a repo. Be careful on watching highly active repositories or you will get an email inbox full of messages.

Star: This is the like, love, favorite of GitHub. Marking this will bookmark this repository under your Stars area in your Personal Profile; remember that under your avatar.

Fork: I think this is the most important button on the page. Fork is a concept of Git and source code contribution. If you're going to contribute to a project, you will have to fork it and make your edits in your own version of the code. GitHub Makes this easy by doing it for you when you press this button.
08_buttons

Below these three important buttons, you’ll see the project information area. This area shows the number of commits, branches, releases and contributors on the project.

Commits: These are the base behind the Git Versioning system. Instead of pushing all of the code to the server each time you make changes, the system only stores what those changes are. This makes it easy to roll back and see what someone has actually done with the code. A commit is a package of all the changes made since the last commit.

Branches: When working on a specific idea, you want to leave your main code alone. Here you can copy your code over to a new "Branch" and there you can make your changes without modifying the original. When you feel like you have good code, have tested it and want to move it back to the main branch, you can do that with a pull request. (More on that in the coming sections.)

Releases: This is a version release; let GitHub know to mark this commit as full package. People can go here and download the code as it was on each release.

Contributors: Contributors are people who have worked and helped maintain a project.


09_infobar

Clicking on the colored part beneath that bar will reveal statistics on the distribution of programming languages used in the program.

10_langdist

The next section allows you to traverse through the code in the project. But keep in mind that if you edit someone else's code note, it will fork it to your own repository for editing. If you were to click on a file, it would take you into the file editor. For example, if I click on AUTHORS.en.txt, it shows who submitted the latest commit, a line of contributors, how many lines of code, the file size, and more:

11_editfile

Note the buttons near the top right of the editor:

Raw: This will open a new window and show the raw contents of the file. Allowing you to select it all to copy.

Blame: This is another view of the code. It shows all the recent commits on the left with the code on the right, for each line of the code.

History: This shows in chronological order the changes made to this file.

Open in GH Desktop: This will download the file and open it in GitHub's desktop source control software.

Edit: If this is your file, it will open the file for you to edit and update. If it's someone else's file, it will open it up in a fork for you to edit.

Delete: Again, if this is your file it will just delete the file. If it's someone else's file, it will fork the project to your own repository and delete this file from it.

Back on the repo main page, you can see the section below the files which is called the README. This is the main documentation point for all repositories on GitHub. You use this to describe your project and more.











Creating a project
It's easy to create a project, just click the plus sign at the top of any page and choose New repository.

12_newrepo

On the next page fill out the details. Click “initialize this repository with a README” (most of the time I choose the MIT License). If you click the info sign next to the license, GitHub can tell you all about the different types of licenses available. (Note: Due to GitHub's Terms of Service, you must use an open source license for public repositories). After you’ve filled it out you can click “Create repository.” Here’s my repository for this post:

13_repoexample
Managing a project
Once you create a repository, you’ll need to manage it. There is a lot that goes with managing a GitHub repository, but I promise it’s nothing you can’t handle. Let’s walk through it together.







Issues
Issues are probably the second most important part of GitHub. Issues make things like managing bugs and feature requests a cinch. First you should know that open issues are green and closed issues are red. To create a new issue just hit the big, green “New issue” button. Give your issue a title, and then describe it. This can be anything from a bug, an enhancement, a call for help wanted, or even just a question. These descriptions are known as Labels; labels can be selected on the right. You can also select a milestone if you’ve created one, or assign someone. (Please note that some of these actions require you to be an owner of a repository.) Once you’re done, click “Submit new issue.”

16_newissue
You can view details about an issue directly from the issue page, including all the fields we just populated when submitting the issue. You can link issues to each other using #issuenumber and link to commits using the “commit hash.” This is where you’ll have the discussion of your issue for further conversations, up until it’s closed.

Here’s an example of an active issue board:

18_activeissues




Basic introduction to Git

As briefly mentioned earlier, Git is a source code control system. It has been designed to work for everything from small to large scale projects. It's easy and efficient. To get a full understanding of Git you can head here. To break it down, the concept you’ll follow about 90 percent of the time is this:

Clone

Make Changes

Commit

Push Commit to Server

or

Fork

Clone

Make Changes

Commit

Push Commit to Server

Submit Pull Request
Cloning
When you create your project on GitHub you’ll notice on its home page a link that looks like this:

25_link1

Once you have Git installed all you have to do to get this code onto your machine is run the following command using that link.

 	shell
 

$ git clone https://your-github-link

This will copy the entire master branch (or your default branch) to your local machine.
Commit
Once you’ve cloned your repository you’re free to make changes to the files. After you’re done you’ll want to push the changes back to GitHub. To do this we’re going to make a commit which will store all the changes into a package ready to be pushed to the server. The following commands will add all the changes to a commit for you. (Make sure you’re in the root directory of your project before running these commands.)

The first command adds all the files to your stage and prepares to commit them:




 	shell
 

$ git add .


If you have deleted files, you may get an error when running this command. That's OK, just run the following command instead:


 	shell
 

$ git add . --all

You are now ready to make your commit using this command:

 	shell
 

$ git commit -m 'enter your commit message here describing what you did'


Your commit should now be ready to go! You can have as many commits as you want on your local machine (I do commits when I finish major parts of the project). Once you do a push, it will push all the commits that aren't synced to the server.
Push
Now that you have your commit ready you’ll want to push it to the server, which is easily done with this command:

 	shell
 

$ git push

It will ask you for your username and password. Once you’ve entered those correctly it will push all commits to the server, and you're done!
Pull
If you make changes on the remote repository, you’ll want to get those changes into your local repository (assuming you’ve already cloned it). You can do this with the pull command:
 	shell
 

$ git pull


Checkout

 

If you have created a branch to work with on GitHub, you can easily switch to that branch on your local machine by running the following command:



 	Tshell
 

$ git checkout your-branch-name

Also, I recommend that beginners do all pull requests on the website; this makes it easier.